/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DeceCode, DeceCodeInterface } from "../DeceCode";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "revokeAllowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setAllowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103458061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a2fb2cd81161005b578063a2fb2cd8146100cb578063babcc539146100e7578063d63a8e1114610123578063f2fde38b1461014657600080fd5b806362a3b39d14610082578063715018a6146100a35780638da5cb5b146100ab575b600080fd5b6100a1336000908152600460205260409020805460ff19166001179055565b005b6100a1610159565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a1336000908152600460205260409020805460ff19169055565b6101136100f53660046102df565b6001600160a01b031660009081526004602052604090205460ff1690565b60405190151581526020016100c2565b6101136101313660046102df565b60046020526000908152604090205460ff1681565b6100a16101543660046102df565b6101c4565b6000546001600160a01b031633146101b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101c2600061028f565b565b6000546001600160a01b0316331461021e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b6001600160a01b0381166102835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101af565b61028c8161028f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102f157600080fd5b81356001600160a01b038116811461030857600080fd5b939250505056fea26469706673582212202b0ac9c02c67b313cf8a39f1cae68790874594727baa7484d10fdb04077e49d764736f6c634300080a0033";

type DeceCodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeceCodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DeceCode__factory extends ContractFactory {
  constructor(...args: DeceCodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DeceCode> {
    return super.deploy(overrides || {}) as Promise<DeceCode>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DeceCode {
    return super.attach(address) as DeceCode;
  }
  connect(signer: Signer): DeceCode__factory {
    return super.connect(signer) as DeceCode__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeceCodeInterface {
    return new utils.Interface(_abi) as DeceCodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeceCode {
    return new Contract(address, _abi, signerOrProvider) as DeceCode;
  }
}
